#!/usr/bin/env ruby
$: << File.expand_path("#{File.dirname __FILE__}/../lib")

require 'rubygems'
require 'watch_list'
require 'optparse'
require 'json'

Version = WatchList::VERSION
DEFAULT_FILENAME = 'Robotfile'

mode = nil
file = DEFAULT_FILENAME
output_file = '-'
split = false

options = {
  :apiKey  => ENV['WATCH_LIST_API_KEY'],
  :dry_run => false,
  :color   => true,
  :debug   => false,
}

ARGV.options do |opt|
  begin
    opt.on('',   '--api-key API_KEY') {|v| options[:apiKey]  = v       }
    opt.on('-a', '--apply')           {    mode              = :apply  }
    opt.on('-f', '--file FILE')       {|v| file              = v       }
    opt.on(''  , '--dry-run')         {    options[:dry_run] = true    }
    opt.on('-e', '--export')          {    mode              = :export }
    opt.on(''  , '--split')           {    split             = true    }
    opt.on('-o', '--output FILE')     {|v| output_file       = v       }
    opt.on('-s', '--status')          {    mode              = :status  }
    opt.on(''  , '--no-color')        {    options[:color]   = false   }
    opt.on(''  , '--debug')           {    options[:debug]   = true    }

    opt.on('-h', '--help') do
      puts opt.help
      exit 1
    end

    opt.parse!

    unless mode
      puts opt.help
      exit 1
    end

    raise 'apiKey is required' unless options[:apiKey]
  rescue => e
    $stderr.puts("[ERROR] #{e.message}")
    exit 1
  end
end

String.colorize = options[:color]

begin
  logger = WatchList::Logger.instance
  logger.set_debug(options[:debug])
  client = WatchList::Client.new(options)

  case mode
  when :export
    if split
      logger.info('Export Uptime Robot')
      output_file = DEFAULT_FILENAME if output_file == '-'
      requires = []

      client.export do |name, dsl|
        robotfile = File.join(File.dirname(output_file), "#{name}.robot")
        requires << robotfile
        logger.info("  write `#{robotfile}`")

        open(robotfile, 'wb') do |f|
          f.puts dsl
        end
      end

      logger.info("  write `#{output_file}`")

      open(output_file, 'wb') do |f|
        requires.each do |robotfile|
          f.puts "require '#{File.basename robotfile}'"
        end
      end
    else
      if output_file == '-'
        logger.info('# Export Uptime Robot')
        puts client.export
      else
        logger.info("Export Uptime Robot to `#{output_file}`")
        open(output_file, 'wb') {|f| f.puts client.export }
      end
    end
  when :apply
    unless File.exist?(file)
      raise "No Robotfile found (looking for: #{file})"
    end

    msg = "Apply `#{file}` to Uptime Robot"
    msg << ' (dry-run)' if options[:dry_run]
    logger.info(msg)

    updated = client.apply(file)

    if updated
      logger.warn('[WARN] Applying changes takes about 30 seconds'.yellow)
    else
      logger.info('No change'.intense_blue)
    end
  when :status
    puts JSON.pretty_generate(client.status)
  end
rescue => e
  if options[:debug]
    raise e
  else
    $stderr.puts("[ERROR] #{e.message}".red)
    exit 1
  end
end
